/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dict.gui.swing;

import dict.obj.DictionaryInterface;
import dict.obj.PartOfSpeech;
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JDialog;
import java.util.Vector;

/**
 *
 * @author Sabari
 */
public class AddContext extends javax.swing.JFrame {

    /**
     * Creates new form AddContext
     */
    
    AddWord parent;
    DictionaryInterface di;
    Vector<String> meanings;
    private int mCount;
    String context;
    
    
    public AddContext(AddWord parent, DictionaryInterface di) {
        initComponents();
        meanings = new Vector<String>();
        this.parent = parent;
        this.di = di;
        mCount = 0;
        setContext.addActionListener(
                new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent ae){
                        setActionSetContext(ae);
                    }
                }
        );
        
        addMeaning.addActionListener(
                new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent ae){
                        setActionAddMeaning(ae);
                    }
                }
        );
        
        submit.addActionListener(
                new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent ae){
                        setActionSubmit(ae);
                    }
                }
        );
        
        cancel.addActionListener(
                new ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent ae){
                        setActionCancel(ae);
                    }
                }
        );
        
       
        setVisible(true);
        
    }
    
    private void setActionSetContext(ActionEvent ae){
        try{
            String context = contextField.getText();
            int psCodeIndex = psCodes.getSelectedIndex();
            this.context = psCodes.getSelectedItem().toString();
            this.context += "-"+context;
            di.addPartOfSpeech(DictionaryInterface.getPartOfSpeechCode(psCodeIndex), context);
            addMeaning.setEnabled(true);
            meaningList.setEnabled(true);
            psCodes.setEnabled(false);
            contextField.setEnabled(false);
            setContext.setEnabled(false);
            submit.setEnabled(true);
        }
        catch(Exception e){
            warnings.setText(e.getMessage());
            e.printStackTrace();
        }
        
    }
    
    private void setActionAddMeaning(ActionEvent ae){
         warnings.setText(" ");
         setVisible(false);
         new AddMeaning(this, di);
    }
    
    private void setActionSubmit(ActionEvent ae){
        if(mCount == 0){
            warnings.setText("Meaning list cannot be empty");
        }
        else{
            parent.updateContextList(context);
            setVisible(false);
            parent.setVisible(true);
            dispose();
        }
    }
    
    private void setActionCancel(ActionEvent ae){
        setVisible(false);
        parent.setVisible(true);
        dispose();
    }

    
    void updateMeaningList(String meaning){
        mCount ++;
        meanings.add(mCount+". "+meaning);
        meaningList.setListData(meanings);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contextField = new javax.swing.JTextField();
        psCodes = new javax.swing.JComboBox(DictionaryInterface.getPartOfSpeechCode());
        jScrollPane1 = new javax.swing.JScrollPane();
        meaningList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        addMeaning = new javax.swing.JButton();
        submit = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        setContext = new javax.swing.JButton();
        warnings = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        meaningList.setEnabled(false);
        jScrollPane1.setViewportView(meaningList);

        jLabel1.setText("Meanings");

        addMeaning.setText("Add Meaning");
        addMeaning.setEnabled(false);

        submit.setText("Submit");
        submit.setEnabled(false);

        cancel.setText("Cancel");

        setContext.setText("Set Context");

        warnings.setForeground(new java.awt.Color(240, 0, 0));
        warnings.setText("  ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(warnings)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(psCodes, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addMeaning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(setContext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(cancel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(submit))
                            .addComponent(contextField)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))
                        .addGap(45, 45, 45))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(contextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(psCodes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setContext))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(addMeaning))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submit)
                    .addComponent(cancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(warnings)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMeaning;
    private javax.swing.JButton cancel;
    private javax.swing.JTextField contextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList meaningList;
    private javax.swing.JComboBox psCodes;
    private javax.swing.JButton setContext;
    private javax.swing.JButton submit;
    private javax.swing.JLabel warnings;
    // End of variables declaration//GEN-END:variables
}
